version = 1

test_patterns = [
    "#  File: Radix.py",
    "#  Description:",
    "#  Student Name: Preston Harris",
    "#  Student UT EID: pjh993",
    "#  Partner Name: Justin Kung",
    "#  Partner UT EID:",
    "#  Course Name: CS 313E",
    "#  Unique Number: 52230",
    "#  Date Created: 4/7/2021",
    "#  Date Last Modified: 4/7/2021",
    "import sys",
    "class Queue(object):",
    "    def __init__(self):",
    "        self.queue = []",
    "    # add an item to the end of the queue",
    "    def enqueue(self, item):",
    "        self.queue.append(item)",
    "    # remove an item from the beginning of the queue",
    "    def dequeue(self):",
    "        return (self.queue.pop(0))",
    "    # check if the queue if empty",
    "    def is_empty(self):",
    "        return (len(self.queue) == 0)",
    "    # return the size of the queue",
    "    def size(self):",
    "        return (len(self.queue))",
    "# Input: a is a list of strings that have either lower case",
    "#        letters or digits",
    "# Output: returns a sorted list of strings",
    "def radix_sort(a):",
    "    queued = {}",
    "    last_in_queue = Queue()",
    "    for sub in a:",
    "        last_in_queue.enqueue(sub)",
    "    passed = len(max(a, key=len))",
    "    for i in range(passed):",
    "        # keep running while the last item in the queue is not empty",
    "        while last_in_queue.is_empty() == True:",
    "            sub = last_in_queue.dequeue()",
    "            sub_len = len(sub)",
    "            pad_var = passed - i - 1",
    "            if pad_var &gt;= sub_len:",
    "                asci = 0",
    "            elif pad_var &lt;= sub_len:",
    "                cell = sub[pad_var]",
    "                asci = ord(cell)",
    "            if asci not in queued:",
    "                queued[asci] = Queue()",
    "            queued[asci].enqueue(sub)",
    "        for key in sorted(queued.keys()):",
    "            while not queued[key].is_empty():",
    "                current = queued[key].dequeue()",
    "                last_in_queue.enqueue(current)",
    "    # create empty list to store the ordered string in",
    "    ordered_list = []",
    "    while not last_in_queue.is_empty():",
    "        ordered_list.append(last_in_queue.dequeue())",
    "    return ordered_list",
    "def main():",
    "    # read the number of words in file",
    "    line = sys.stdin.readline()",
    "    line = line.strip()",
    "    num_words = int(line)",
    "    # create a word list",
    "    word_list = []",
    "    for i in range(num_words):",
    "        line = sys.stdin.readline()",
    "        word = line.strip()",
    "        word_list.append(word)",
    "    '''",
    "    # print word_list",
    "    print (word_list)",
    "    '''",
    "    # use radix sort to sort the word_list",
    "    sorted_list = radix_sort(word_list)",
    "    # print the sorted_list",
    "    print(sorted_list)",
    "if __name__ == \"__main__\":",
    "    main()"
]

[[analyzers]]
name = "python"
enabled = true

  [analyzers.meta]
  runtime_version = "3.x.x"